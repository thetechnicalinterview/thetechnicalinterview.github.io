{"topic":"JavaScript","questions":[{"id":1,"question":"For variables, what is the difference between 'undefined' and 'not defined'?","a":"'undefined' means that a variable has been declared but not given a value, whereas 'not defined' would mean that a variable does not exist","b":"'undefined' means that a variable does not exist, whereas 'not defined' would mean that a variable has been declared but not given a value","answer":"a"},{"id":2,"question":"What is a 'closure'?","a":"A function containing a number of inner functions, which shares its parameters with those functions","b":"An inner function with access to variables within its own scope, the scope of the outer function, and global variables, retaining pointers to those variables even after the outer function completes","answer":"b"},{"id":3,"question":"Which of these will empty an array with multiple indices in one call?","a":"myArray.splice(0, myArray.length)","b":"myArray.pop()","answer":"a"},{"id":4,"question":"What is hoisting?","a":"JavaScript's behaviour of moving initialisations to the top of the current scope. It is applicable to variables only","b":"JavaScript's behaviour of moving declarations to the top of the current scope. It is applicable to both variables and functions","answer":"b"},{"id":5,"question":"How would you compare 'var x = function() { ... }' and 'function y() { ... }'?","a":"x is a function expression, whereas y is a function declaration. Only the definition of function y will be hoisted","b":"x is a function declaration, whereas y is a function expression. The definition of both functions will be hoisted","answer":"a"},{"id":6,"question":"What is the 'typeof' keyword used for?","a":"Returning the object type of a variable/property/value as a string","b":"Returning the primitive type of a variable/property/value as a string","answer":"b"},{"id":7,"question":"What is the 'instanceof' keyword used for?","a":"Testing whether an object has the property of a given constructor in its prototype chain","b":"Testing whether an object is of the type specified in a given string","answer":"a"},{"id":8,"question":"What is the effect of including 'use strict' at the start of a JavaScript file?","a":"It enforces a strict naming convention for the functions and variables declared in that source","b":"It indicates that that source should be run in strict mode, throwing errors in the case of bad syntax or when 'unsafe' actions are taken","answer":"b"},{"id":9,"question":"Why might you wrap the contents of a JavaScript file in a function?","a":"To namespace that source, avoiding potential name clashes with other modules and controlling the visibility of member properties","b":"To signify where the source in that file begins and ends, making its contents easier to find after concatenation with other libraries","answer":"a"},{"id":10,"question":"How would you test if a value is Not-A-Number (NaN)?","a":"myValue == NaN","b":"isNaN(myValue)","answer":"b"},{"id":11,"question":"What is the difference between == and ===?","a":"== checks for equality in value, whereas === checks for equality in both type and value","b":"== checks for equality in value, whereas === checks for equality in type","answer":"a"},{"id":12,"question":"What is event bubbling?","a":"After an event has triggered on a parent element, it then triggers on each child element in turn","b":"After an event has triggered on a child element, it then triggers on each parent element in turn","answer":"b"},{"id":13,"question":"How would you prevent event bubbling?","a":"event.stopPropagation()","b":"event.preventDefault()","answer":"a"},{"id":14,"question":"What syntax does JavaScript allow for comments?","a":"Only // for comments of any length","b":"Either // for single line comments or /* */ for multi line comments","answer":"b"},{"id":15,"question":"What is the result of dividing a negative number by zero?","a":"-Infinity","b":"NaN","answer":"a"},{"id":16,"question":"What is a callback?","a":"A function which receives a second function as a parameter","b":"A function passed as a parameter to a second function, which will later be executed as part of that second function","answer":"b"},{"id":17,"question":"What is a promise?","a":"An object representing an operation that is yet to complete, which will later be fulfilled or rejected when that operation completes","b":"The actual value returned by an asynchronous call","answer":"a"},{"id":18,"question":"Which of these correctly describes a JavaScript prototype?","a":"A JavaScript object which inherits its properties and methods from another object. Only custom JavaScript objects are prototypes","b":"An object from which another JavaScript object inherits its properties and methods. Every JavaScript object has a prototype","answer":"b"},{"id":19,"question":"How would you access the prototype of an individual JavaScript object?","a":"myObject.__proto__","b":"myObject.prototype","answer":"a"},{"id":20,"question":"How would you access the prototype of a JavaScript prototype?","a":"myObject.__proto__","b":"myObject.prototype","answer":"b"},{"id":21,"question":"What is the effect of calling .bind(this) on a function?","a":"To retain the current context of 'this' within that function","b":"To pass the current context of 'this' as an extra parameter to that function","answer":"a"},{"id":22,"question":"What is the difference between invoking a function with .apply(...) vs .call(...)?","a":".apply(...) also allows you to specify a value for 'this', whereas .call(...) does not","b":".apply(...) lets you invoke the function with all parameters specified as an array, whereas .call(...) requires you to list the arguments individually","answer":"b"},{"id":23,"question":"Which of these statements correctly compares 'myVar = 5' and 'var myVar = 5'?","a":"'myVar = 5' will declare and initialise myVar as as a global variable, whereas 'var myVar = 5' will declare and initialise it as a local variable","b":"'var myVar = 5' will successfully declare and initialise myVar, whereas 'myVar = 5' will cause an error as myVar has not been declared","answer":"a"},{"id":24,"question":"Which of these statements correctly compares 'undefined' and 'null'?","a":"'undefined' and 'null' are equivalent, and can be used interchangeably to refer to the value of a property/variable which has not been defined","b":"'undefined' indicates that a variable or property has not been defined, whereas 'null' is used to explicitly assign an empty value","answer":"b"},{"id":25,"question":"Does JavaScript support automatic type conversion?","a":"Yes","b":"No","answer":"a"},{"id":26,"question":"What does the 'this' keyword refer to by default in JavaScript?","a":"The prototype providing the definition of the current function","b":"The object that the current function is a member of","answer":"b"},{"id":27,"question":"Within a global function, which object does the 'this' keyword reference?","a":"window object","b":"document object","answer":"a"},{"id":28,"question":"What is the difference between setInterval(...) and setTimeout(...)?","a":"setTimeout(...) will execute a function repeatedly after each passing of the given time period, whereas setInterval(...) will execute the function once after the given time period","b":"setTimeout(...) will execute a function once after the given time period, whereas setInterval(...) will execute the function repeatedly after each passing of the given time period","answer":"b"}]}